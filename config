"==============================================================================
" vim 内置配置
"==============================================================================
" 设置 vimrc 修改保存后立刻生效，不用在重新打开 " 建议配置完成后将这个关闭，否则配置多了之后会很卡 " autocmd BufWritePost $MYVIMRC source $MYVIMRC
" 关闭兼容模式
set nocompatible

set encoding=utf-8 "set number " 设置行号
set cursorline "突出显示当前行
" set cursorcolumn " 突出显示当前列 set showmatch " 显示括号匹配
set completeopt-=preview

set signcolumn=no
" tab 缩进
set tabstop=4 " 设置Tab长度为4空格
set shiftwidth=4 " 设置自动缩进长度为4空格
set autoindent " 继承前一行的缩进方式，适用于多行注释

" 识别鼠标点击
" set mouse=a

" 高亮显示搜索
set hlsearch
" 开启实时搜索
set incsearch
" 搜索时大小写不敏感
set ignorecase
" 启用命令行模式下的Tab补全
set wildmenu
" 定义快捷键的前缀，即<Leader>
let mapleader=";"

syntax enable
syntax on                    " 开启文件类型侦测
filetype plugin indent on    " 启用自动补全

" 允许空格键和光标键跨越行边界"
" set whichwrap+=<,>,h,l

" make backspace work like most other apps
set backspace=2

" 使用空格代替制表符
set expandtab

" 退出插入模式指定类型的文件自动保存
" au InsertLeave *.go,*.sh,*.php write

"==============================================================================
" 插件配置
"==============================================================================

" 插件开始的位置
call plug#begin('~/.vim/plugged')

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" 可以快速对齐的插件
Plug 'junegunn/vim-easy-align'

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'

" 可以使 nerdtree Tab 标签的名称更友好些
Plug 'jistr/vim-nerdtree-tabs'

" 可以在导航目录中看到 git 版本信息
Plug 'Xuyuanp/nerdtree-git-plugin'

" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'

" 自动补全括号的插件，包括小括号，中括号，以及花括号
Plug 'jiangmiao/auto-pairs'

" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 代码自动完成，安装完插件还需要额外配置才可以使用
Plug 'Valloric/YouCompleteMe'

" 可以在文档中显示 git 信息
Plug 'airblade/vim-gitgutter'

" 下面两个插件要配合使用，可以自动生成代码块
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" 配色方案
" colorscheme neodark
Plug 'KeitaNakamura/neodark.vim'
" colorscheme monokai
Plug 'crusoexia/vim-monokai'
" colorscheme github 
Plug 'acarapetis/vim-colors-github'
" colorscheme one 
Plug 'rakr/vim-one'

" go 主要插件
Plug 'fatih/vim-go', { 'tag': '*' }

" 查找ag
Plug 'epmatsw/ag.vim'

" 自动生成tag
Plug 'ludovicchabant/vim-gutentags'

Plug 'rhysd/vim-clang-format'

" 插件结束的位置，插件全部放在此行上面
call plug#end()


"==============================================================================
" 主题配色
"==============================================================================

" 配色方案, 可以从上面插件安装中的选择一个使用
set background=dark " 主题背景 dark-深色; light-浅色
" colorscheme neodark 

"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:godef_split=2

"==============================================================================
" NERDTree 插件
"==============================================================================

" 打开和关闭NERDTree快捷键
map <F11> :NERDTreeToggle<CR>
" 显示行号
let NERDTreeShowLineNumbers=0
" 打开文件时是否显示目录
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
" let NERDTreeWinSize=31
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开vim 文件显示文件路径
let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
" let g:nerdtree_tabs_open_on_console_startup=1

" let NERDTreeMapOpenInTab='<ENTER>'


"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================

" majutsushi/tagbar 插件打开关闭快捷键
" nmap <F12> :TagbarToggle<CR>

nmap <leader>t :call JumpToTagbar()<CR>

let g:tagbar_autofocus=1

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" 定义函数用于跳转到 Tagbar 窗口
function! JumpToTagbar()
  let tagbar_winid = bufwinnr('__Tagbar__')
  if tagbar_winid != -1
    execute tagbar_winid . 'wincmd w'
  else
    TagbarOpen
  endif
endfunction


" autocmd FileType python,c,cpp,go TagbarOpen

"==============================================================================
"  nerdtree-git-plugin 插件
"==============================================================================
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeGitStatusShowIgnored = 1

" 自动显示 NERDTree 侧边栏
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) | NERDTree | endif

"==============================================================================
"  Valloric/YouCompleteMe 插件
"==============================================================================

" make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_select_completion = ['<C-n>', '<space>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'

let g:ycm_key_list_select_completion = ['<C-n>']
let g:ycm_key_list_previous_completion = ['<C-p>']
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:SuperTabClosePreviewOnPopupClose = 1

" better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"
" if executable('pyls')
"     " pip install python-language-server
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'pyls',
"         \ 'cmd': {server_info->['pyls']},
"         \ 'allowlist': ['python'],
"         \ })
" endif
"

" ==============================================================================
"  gtags配置
" ==============================================================================
""设置标签tags
set tags=./.tags;,.tags
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project', '.gitignore']

" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q+f']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

"==============================================================================
" ag 配置
"==============================================================================
let g:ag_working_path_mode="r"
let g:ag_prg="ag --column --nogroup --noheading"

"==============================================================================
" airline 配置
"==============================================================================
" let g:airline_theme='bubblegum'
let g:airline#extensions#tabline#enabled = 1 
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#tab_min_count = 2 
" let g:airline#extensions#tabline#show_tabs = 1 
" let g:airline#extensions#tabline#show_tab_type = 1
" let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#branch#enabled = 0 
let g:airline#extensions#tagbar#enabled = 0 
let g:airline#extensions#whitespace#enabled = 0 
let g:airline#extensions#quickfix#enabled = 0 

" 只显示文件的相对路径和行号/总行号
let g:airline_section_a = '%{fnamemodify(expand("%:p"), ":~:.")}'
let g:airline_section_b = '%{line(".") . "/" . line("$")}'
let g:airline_section_c = ''
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline_section_z = ''

"==============================================================================
" clang 配置
"==============================================================================
" let g:clang_format#style = 'GNU'
" let g:clang_format#auto_format = 1
" let g:clang_format#command = '/usr/local/clang/bin/clang-format' 

" ==============================================================================
" nmap配置
" ==============================================================================

" 系统剪切板复制粘贴
" v 模式下复制内容到系统剪切板
" vmap <Leader>c "+y
" n 模式下复制一行到系统剪切板
" nmap <Leader>c "+yy
" n 模式下粘贴系统剪切板的内容
" nmap <Leader>v "+p
" imap <Leader>v "+p

" 保存文件
" nmap <Leader>w :w!<cr>
" imap <Leader>w <esc>:w!<cr>

" 退出文件
" nmap <Leader>q :q!<cr>
" imap <Leader>q <esc>:q!<cr>

" 进入函数
" nmap <Leader>e <C-]>
" nmap <Leader>r <C-t>

" 上下翻页
" nmap <Leader>f <C-f>
" nmap <Leader>b <C-b>

" 分屏
" nmap <Leader>v <C-w>v
" nmap <Leader>s <C-w>s

" 移动光标
" nmap <C-h> <C-w>h
" nmap <C-j> <C-w>j
" nmap <C-k> <C-w>k
" nmap <C-l> <C-w>l
" nmap <C-m> <C-w>w

" 光标回到上一次
" nmap <Leader>t <C-o>

" 跳转定义
" nmap <Leader>p gd
" nmap <Leader>n gD

" 查找下一个
" noremap <silent> <leader>n * <C-R><C-W><cr>

" 全局选中
" nmap <Leader>a ggVG

" 跳到最后一次修改的位置, 也可使用g;
" nmap <Leader>m `.

" 跳到行尾
" nmap 9 g_
" 向下查找
" nmap 8 *
" 向上查找
" nmap 3 #

" 移动窗口
" nmap <Leader>h <C-w>H
" nmap <Leader>j <C-w>J
" nmap <Leader>k <C-w>K
" nmap <Leader>l <C-w>L

" 调整窗口宽度
" nmap <leader>[ <C-w><
" nmap <leader>] <C-w>>
" 调整窗口高度
" nmap <C-u> <C-w>-
" nmap <C-y> <C-w>+
"
" 不能映射<C-m>, 回车会失效

nmap <leader>g :Ag! -w
" 全局ag
noremap <silent> <leader>s :Ag! <C-R><C-W><cr>
" 单词查找
noremap <silent> <leader>w :Ag! -w <C-R><C-W><cr>
" 选中区域查找
vnoremap <silent> <leader>q y:Ag! -Q "<C-R>=escape(@",'/\')<CR>"<CR>
" 查找头文件
noremap <silent> <leader>f :tag <C-R>=expand("<cfile>")<cr><cr>

" 回到之前的窗口
noremap <silent> <leader>r :wincmd p <cr>

nmap <F5> :!cscope -Rbq <CR><CR>:cscope reset <CR><CR>
" nmap <F5> :!if [ -x gen_tags.sh ];then ./gen_tags.sh;else cscope -Rbc;fi <CR><CR>:cscope reset <CR><CR>

" 查找光标下符号的引用
" noremap <silent> <leader>s :GscopeFind s <C-R><C-W><cr> :copen 10<CR><CR>
" " 查找光标下符号的定义
" noremap <silent> <leader>d :GscopeFind g <C-R><C-W><cr> :copen 10<CR><CR>
" " 查找调用此函数的函数
" noremap <silent> <leader>r :GscopeFind c <C-R><C-W><cr> :copen 10<CR><CR>
" " 查找此函数调用的函数
" noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
" " 查找光标下的字符串
" noremap <silent> <leader>t :GscopeFind t <C-R><C-W><cr>
" " 查找光标下egrep模式
" noremap <silent> <leader>g :GscopeFind e <C-R><C-W><cr> :copen 10<CR><CR>
" " 查找光标下的文件名
" noremap <silent> <leader>f :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
" " 查找包括光标下的文件名的文件
" noremap <silent> <leader>i :GscopeFind i <C-R>=expand("<cfile>")<cr><cr> :copen 10<CR><CR>
" " 查找分配当前符号的位置
" noremap <silent> <leader>a :GscopeFind a <C-R><C-W><cr> :copen 10<CR><CR>
" " 在ctags数据库中查找当前单词
" noremap <silent> <leader>z :GscopeFind z <C-R><C-W><cr> :copen 10<CR><CR>
" " 选中区域进行查找
" vnoremap <leader>x y:GscopeFind e <C-R>=escape(@",'/\')<CR><CR> :copen 10<CR><CR>

if has("cscope")
        " Look for a 'cscope.out' file starting from the current directory,
        " going up to the root directory.
        let s:dirs = split(getcwd(), "/")
        while s:dirs != []
                let s:path = "/" . join(s:dirs, "/")
                if (filereadable(s:path . "/cscope.out"))
                        execute "cs add " . s:path . "/cscope.out " . s:path . " -v"
                        break
                endif
                let s:dirs = s:dirs[:-2]
        endwhile

		set cscopetag " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
        set csto=0  " Use cscope first, then ctags
        " set cst     " Only search cscope
        " set csverb  " Make cs verbose
		set cscopeverbose " show msg when any other cscope db added

	" s: Find this symbol
	" g: Find this definition
	" d: Find functions called by this function
	" c: Find functions calling this function
	" t: Find this text string
	" e: Find this egrep pattern
	" f: Find this file
	" i: Find files #including this file
	" a: Find places where this symbol is assigned a value

	nmap <leader><leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <leader><leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <leader><leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <leader><leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <leader><leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <leader><leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <leader><leader>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <leader><leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

" tab 标签页切换快捷键
:nn <Leader>1 1gt
:nn <Leader>2 2gt
:nn <Leader>3 3gt
:nn <Leader>4 4gt
:nn <Leader>5 5gt
:nn <Leader>6 6gt
:nn <Leader>7 7gt
:nn <Leader>8 8gt
:nn <Leader>9 8gt
:nn <Leader>0 :tablast<CR>

